#!/usr/bin/env python3\n\"\"\"\n🚁 완전한 PPO-ROS2-RViz 통합 시스템\n강화학습 드론 + 맵 시각화 + 실시간 제어\n\"\"\"\n\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, ExecuteProcess, TimerAction, GroupAction\nfrom launch.substitutions import LaunchConfiguration, PathJoinSubstitution\nfrom launch_ros.actions import Node, SetParameter\nfrom launch_ros.substitutions import FindPackageShare\nfrom launch.conditions import IfCondition\nimport os\n\ndef generate_launch_description():\n    # 런치 인수 정의\n    use_sim_time_arg = DeclareLaunchArgument(\n        'use_sim_time',\n        default_value='true',\n        description='시뮬레이션 시간 사용 여부'\n    )\n    \n    rviz_arg = DeclareLaunchArgument(\n        'rviz',\n        default_value='true',\n        description='RViz 실행 여부'\n    )\n    \n    fcu_url_arg = DeclareLaunchArgument(\n        'fcu_url',\n        default_value='udp://:14540@127.0.0.1:14557',\n        description='FCU 연결 URL (PX4 SITL)'\n    )\n    \n    # TF2 Static Transform Publisher - 좌표계 설정\n    tf_base_to_map = Node(\n        package='tf2_ros',\n        executable='static_transform_publisher',\n        name='tf_base_to_map',\n        arguments=['0', '0', '0', '0', '0', '0', 'map', 'base_link'],\n        output='screen'\n    )\n    \n    tf_base_to_body = Node(\n        package='tf2_ros',\n        executable='static_transform_publisher',\n        name='tf_base_to_body',\n        arguments=['0', '0', '0', '0', '0', '0', 'base_link', 'base_link_frd'],\n        output='screen'\n    )\n    \n    # MAVROS 노드\n    mavros_node = Node(\n        package='mavros',\n        executable='mavros_node',\n        name='mavros',\n        output='screen',\n        parameters=[{\n            'fcu_url': LaunchConfiguration('fcu_url'),\n            'gcs_url': '',\n            'target_system_id': 1,\n            'target_component_id': 1,\n            'fcu_protocol': 'v2.0',\n            'system_id': 255,\n            'component_id': 240,\n            'startup_px4_usb_quirk': True,\n            'use_sim_time': LaunchConfiguration('use_sim_time'),\n        }],\n        respawn=True,\n        respawn_delay=2\n    )\n    \n    # PPO-ROS2 브릿지 노드 (강화학습 + ROS2 통합)\n    ppo_bridge_node = TimerAction(\n        period=3.0,\n        actions=[\n            Node(\n                package='ppo_drone_ros2',\n                executable='ros2_ppo_bridge.py',\n                name='ppo_bridge',\n                output='screen',\n                parameters=[{\n                    'use_sim_time': LaunchConfiguration('use_sim_time'),\n                    'control_rate': 20,\n                    'visualize': True,\n                    'publish_path': True,\n                    'publish_markers': True,\n                }],\n                respawn=True,\n                respawn_delay=2\n            )\n        ]\n    )\n    \n    # 드론 상태 퍼블리셔 (위치, 자세, 속도 정보)\n    drone_state_node = TimerAction(\n        period=2.0,\n        actions=[\n            Node(\n                package='ppo_drone_ros2',\n                executable='drone_state_publisher.py',\n                name='drone_state_publisher',\n                output='screen',\n                parameters=[{\n                    'use_sim_time': LaunchConfiguration('use_sim_time'),\n                    'publish_rate': 30,\n                }],\n                respawn=True\n            )\n        ]\n    )\n    \n    # 맵 서버 (가상 3D 환경)\n    map_server_node = Node(\n        package='nav2_map_server',\n        executable='map_server',\n        name='map_server',\n        output='screen',\n        parameters=[{\n            'yaml_filename': PathJoinSubstitution([\n                FindPackageShare('ppo_drone_ros2'),\n                'maps',\n                'drone_arena.yaml'\n            ]),\n            'use_sim_time': LaunchConfiguration('use_sim_time'),\n        }]\n    )\n    \n    # RViz2 설정\n    rviz_config_path = PathJoinSubstitution([\n        FindPackageShare('ppo_drone_ros2'),\n        'config',\n        'drone_visualization.rviz'\n    ])\n    \n    rviz_node = Node(\n        package='rviz2',\n        executable='rviz2',\n        name='rviz2',\n        arguments=['-d', rviz_config_path],\n        output='screen',\n        parameters=[{\n            'use_sim_time': LaunchConfiguration('use_sim_time'),\n        }],\n        condition=IfCondition(LaunchConfiguration('rviz'))\n    )\n    \n    # 시뮬레이션 시간 설정\n    set_use_sim_time = SetParameter(\n        name='use_sim_time',\n        value=LaunchConfiguration('use_sim_time')\n    )\n    \n    return LaunchDescription([\n        # 런치 인수들\n        use_sim_time_arg,\n        rviz_arg,\n        fcu_url_arg,\n        \n        # 글로벌 파라미터\n        set_use_sim_time,\n        \n        # TF2 좌표계\n        tf_base_to_map,\n        tf_base_to_body,\n        \n        # 코어 노드들\n        mavros_node,\n        \n        # 애플리케이션 노드들 (순차 시작)\n        ppo_bridge_node,\n        drone_state_node,\n        \n        # 시각화\n        map_server_node,\n        rviz_node,\n    ]) 