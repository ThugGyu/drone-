#!/usr/bin/env python3\n\"\"\"\n🚁 PPO 강화학습 + RViz 데모 런치 파일\n드론 시뮬레이션, 강화학습 모델, RViz 시각화 통합 시스템\n\"\"\"\n\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, ExecuteProcess, TimerAction, GroupAction, IncludeLaunchDescription\nfrom launch.substitutions import LaunchConfiguration, PathJoinSubstitution, FindExecutable\nfrom launch_ros.actions import Node, SetParameter\nfrom launch_ros.substitutions import FindPackageShare\nfrom launch.conditions import IfCondition\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nimport os\n\ndef generate_launch_description():\n    # 런치 인수 정의\n    use_sim_time_arg = DeclareLaunchArgument(\n        'use_sim_time',\n        default_value='true',\n        description='시뮬레이션 시간 사용 여부'\n    )\n    \n    rviz_arg = DeclareLaunchArgument(\n        'rviz',\n        default_value='true', \n        description='RViz 실행 여부'\n    )\n    \n    ppo_model_arg = DeclareLaunchArgument(\n        'ppo_model',\n        default_value='',\n        description='사용할 PPO 모델 경로 (빈 값이면 최신 모델 자동 선택)'\n    )\n    \n    # 파라미터 설정\n    use_sim_time = LaunchConfiguration('use_sim_time')\n    rviz_enabled = LaunchConfiguration('rviz')\n    ppo_model_path = LaunchConfiguration('ppo_model')\n    \n    # 현재 패키지 경로\n    pkg_share = FindPackageShare('drone_ppo')\n    \n    # RViz 설정 파일\n    rviz_config_file = PathJoinSubstitution([\n        pkg_share,\n        'config',\n        'drone_visualization.rviz'\n    ])\n    \n    # 맵 파일\n    map_file = PathJoinSubstitution([\n        pkg_share,\n        'maps',\n        'drone_arena.yaml'\n    ])\n    \n    # Static Transform Publishers (좌표계 설정)\n    static_transforms = GroupAction([\n        # World -> Map 변환\n        Node(\n            package='tf2_ros',\n            executable='static_transform_publisher',\n            name='world_to_map_publisher',\n            arguments=['0', '0', '0', '0', '0', '0', 'world', 'map'],\n            parameters=[{'use_sim_time': use_sim_time}]\n        ),\n        \n        # Map -> Odom 변환\n        Node(\n            package='tf2_ros',\n            executable='static_transform_publisher',\n            name='map_to_odom_publisher',\n            arguments=['0', '0', '0', '0', '0', '0', 'map', 'odom'],\n            parameters=[{'use_sim_time': use_sim_time}]\n        ),\n        \n        # Odom -> Base_link 변환 (동적으로 드론 위치에 따라 업데이트됨)\n        Node(\n            package='tf2_ros',\n            executable='static_transform_publisher',\n            name='odom_to_base_link_publisher',\n            arguments=['0', '0', '0', '0', '0', '0', 'odom', 'base_link'],\n            parameters=[{'use_sim_time': use_sim_time}]\n        )\n    ])\n    \n    # 맵 서버 (나중에 실제 맵 파일이 있을 때 활성화)\n    map_server = Node(\n        package='nav2_map_server',\n        executable='map_server',\n        name='map_server',\n        output='screen',\n        parameters=[{\n            'yaml_filename': map_file,\n            'use_sim_time': use_sim_time\n        }],\n        condition=IfCondition('false')  # 일단 비활성화\n    )\n    \n    # 드론 상태 퍼블리셔 (시뮬레이션 데이터 생성)\n    drone_state_publisher = Node(\n        package='drone_ppo',\n        executable='drone_state_publisher.py',\n        name='drone_state_publisher',\n        output='screen',\n        parameters=[{\n            'publish_rate': 30,\n            'use_sim_time': use_sim_time\n        }]\n    )\n    \n    # PPO-ROS2 브릿지 (강화학습 모델과 ROS2 연결)\n    ppo_bridge = Node(\n        package='drone_ppo',\n        executable='ros2_ppo_bridge.py',\n        name='ppo_bridge',\n        output='screen',\n        parameters=[{\n            'model_path': ppo_model_path,\n            'control_frequency': 20.0,\n            'use_sim_time': use_sim_time\n        }]\n    )\n    \n    # 목표 지점 퍼블리셔 (대화형 목표 설정)\n    goal_publisher = Node(\n        package='drone_ppo',\n        executable='goal_publisher.py',\n        name='goal_publisher',\n        output='screen',\n        parameters=[{\n            'use_sim_time': use_sim_time,\n            'default_goal_x': 10.0,\n            'default_goal_y': 10.0,\n            'default_goal_z': 5.0\n        }]\n    )\n    \n    # RViz 시각화\n    rviz_node = Node(\n        package='rviz2',\n        executable='rviz2',\n        name='rviz2',\n        arguments=['-d', rviz_config_file],\n        parameters=[{'use_sim_time': use_sim_time}],\n        output='screen',\n        condition=IfCondition(rviz_enabled)\n    )\n    \n    # 드론 시뮬레이터 (MAVROS 대신 간단한 시뮬레이션)\n    drone_simulator = Node(\n        package='drone_ppo',\n        executable='simple_drone_simulator.py',\n        name='simple_drone_simulator',\n        output='screen',\n        parameters=[{\n            'use_sim_time': use_sim_time,\n            'physics_rate': 100.0,\n            'publish_rate': 50.0\n        }]\n    )\n    \n    # 성능 모니터링 노드\n    performance_monitor = Node(\n        package='drone_ppo',\n        executable='performance_monitor.py',\n        name='performance_monitor',\n        output='screen',\n        parameters=[{\n            'use_sim_time': use_sim_time,\n            'log_frequency': 1.0\n        }]\n    )\n    \n    # 시작 지연 설정\n    delayed_ppo_bridge = TimerAction(\n        period=3.0,  # 3초 후 PPO 브릿지 시작\n        actions=[ppo_bridge]\n    )\n    \n    delayed_goal_publisher = TimerAction(\n        period=5.0,  # 5초 후 목표 퍼블리셔 시작\n        actions=[goal_publisher]\n    )\n    \n    # 시작 메시지\n    startup_message = ExecuteProcess(\n        cmd=['echo', '🚁 PPO 드론 + RViz 데모 시스템 시작됨!'],\n        output='screen'\n    )\n    \n    return LaunchDescription([\n        # 런치 인수들\n        use_sim_time_arg,\n        rviz_arg,\n        ppo_model_arg,\n        \n        # 시뮬레이션 시간 설정\n        SetParameter(name='use_sim_time', value=use_sim_time),\n        \n        # 시작 메시지\n        startup_message,\n        \n        # 좌표계 변환\n        static_transforms,\n        \n        # 핵심 노드들\n        drone_simulator,\n        drone_state_publisher,\n        performance_monitor,\n        \n        # 지연된 시작\n        delayed_ppo_bridge,\n        delayed_goal_publisher,\n        \n        # 시각화\n        rviz_node,\n        \n        # 맵 서버 (필요시)\n        # map_server,\n    ]) 